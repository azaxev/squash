#!/bin/bash

#
# must does not report correct line#
#

# ANSI/VT100 Control sequences
# see here: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# or here: http://ascii-table.com/ansi-escape-sequences-vt-100.php
readonly FGRED="\e[31m"
readonly FGGREEN="\e[32m"
readonly FGCYAN="\e[36m"
readonly FGDEFAULT="\e[39m"
readonly SETBOLD="\e[1m"
readonly CLRATTR="\e[0m"

die() { echo -e "${FGRED}$*\n" >&2 ; exit 1; }

if [ $EUID -ne 0 ]; then die "This utility can be only used by root"; fi

must() {
	"$@"
	local err=$?
#	if [ $err -ne 0 ]; then echo -e "fuck"; exit $err; fi
	if [ $err -ne 0 ]; then echo -e "${FGRED}${BASH_SOURCE[0]}(${BASH_LINENO[0]}) error: ${SETBOLD}$@${CLRATTR}${FGDEFAULT}" >&2; exit $err; fi
}

msg() {
	echo -e "${FGCYAN}$1${FGDEFAULT}"
}

doSquash() {
	if [ $# -eq 0 ]; then die "${FUNCNAME[0]} needs directory path"; fi
	local dir=`readlink -f $1`
	if [ ! -d $dir ]; then die "$1 is not squashable directory"; fi
	if mount | grep -q "overlay on $dir"; then die "$1 already squashed"; fi
	local name=${dir##*/}
	local parent=${dir%/*}
	local squash=$parent/.$name.squashfs
	local lowerdir=$parent/.$name.base
	if mount | grep -q "$squash on $lowerdir"; then
		msg "SquashFS already mounted on $lowerdir, using it"
	else
		if [ -f $squash ]; then
			msg "$squash already exists, using this"
		else
			msg "Compressing $dir to $squash, this may take some time ..."
			must mksquashfs $dir $squash
		fi
		must chmod -w $squash
		must mkdir -p $lowerdir
		msg "Mounting $squash to $lowerdir"
		must mount $squash $lowerdir -t squashfs -o loop -o ro
	fi
	if [ -d $dir ]; then
		msg "Renaming $dir to $dir.orig"
		must mv $dir $dir.orig
	fi
	must mkdir -p $dir
	workdir=/tmp/overlay/$name
	must mkdir -p $workdir
	msg "Mounting squashed dir $dir"
	must mount -t overlay overlay -o lowerdir=$lowerdir,upperdir=$dir,workdir=$workdir $dir
	msg "${FGGREEN}Done"
}

doResquash() {
	if [ $# -eq 0 ]; then die "${FUNCNAME[0]} needs directory path"; fi
	local dir=`readlink -f $1`
	if [ ! -d $dir ]; then die "$1 is not directory"; fi
	if ! mount | grep -q "overlay on $dir"; then die "$1 not squashed"; fi
	local name=${dir##*/}
	local parent=${dir%/*}
	local squash=$parent/.$name.squashfs
	local lowerdir=$parent/.$name.base
	if [ ! -f $squash ]; then die "$squash not found"; fi
	if [ ! -d $lowerdir ]; then die "$lowerdir not found"; fi
    msg "Compressing $dir to $squash.new, this may take some time ..."
	must mksquashfs $dir $squash.new
    msg "Unmounting $dir and $lowerdir"
    must umount $dir
    must umount $lowerdir
    
	msg "Compressing changes into $dir-diff.tar.gz"
	local lastDir=$PWD
	cd $parent
	tar -czpf $name-diff.tar.gz $name
	local err=$?
	cd $lastDir
	if [ $err -ne 0 ]; then die "Could not compress changes, aborting"; fi

    must chmod +w $squash
    msg "${FGCYAN}Replacing $squash with $squash.new"
    must rm $squash
    must mv $squash.new $squash
	must chmod -w $squash
	msg "Mounting $squash to $lowerdir"
	must mount $squash $lowerdir -t squashfs -o loop -o ro
	workdir=/tmp/overlay/$name
	must mkdir -p $workdir
	msg "Mounting squashed dir $dir"
	must mount -t overlay overlay -o lowerdir=$lowerdir,upperdir=$dir,workdir=$workdir $dir
	msg "${FGGREEN}Done"
}

doUmount() {
	if [ $# -eq 0 ]; then die "${FUNCNAME[0]} needs directory path"; fi
	local dir=`readlink -f $1`
	if [ ! -d $dir ]; then die "$1 is not directory"; fi
	if ! mount | grep -q "overlay on $dir"; then die "$1 not squashed"; fi
	local name=${dir##*/}
	local parent=${dir%/*}
	local squash=$parent/.$name.squashfs
	local lowerdir=$parent/.$name.base
	if [ ! -f $squash ]; then die "$squash not found"; fi
	if [ ! -d $lowerdir ]; then die "$lowerdir not found"; fi
	must umount $dir
	must umount $lowerdir
	# todo:
	must rmdir $lowerdir
	msg "Compressing changes into $dir-diff.tar.gz"
	local lastDir=$PWD
	cd $parent
	tar -czpf $name-diff.tar.gz $name
	local err=$?
	cd $lastDir
	if [ $err -ne 0 ]; then
		msg "Could not compress changes, restore $dir manually"
	else
		must rm -r $dir/*
		must rmdir $dir
		if [ -d $dir.orig ]; then
			must mv $dir.orig $dir
		else
			must unsquashfs -d $dir $squash
		fi
	fi
	msg "${FGGREEN}Done"
}

help() {
	if [ $# -eq 0 ]; then
		echo -e "Directory squasher v0.15 2019-01-05, Adam Zakusev\n"
		echo -e "usage: ${0##*/} <action> [<dir>] [options]\n"
		echo -e "actions:\n"
		echo "  h <dir>   this help"
		echo "  s <dir>   squashes the directory"
		echo "  r <dir>   re-squash (update) directory"
		echo "  u <dir>   unmount SquashFS and OverlayFS from the directory"
		echo -e "\nNOTE: during s/r/u no other programs can be accessing files"
		echo
		exit 1
	fi
}

readonly arg1=${1/-/}

case $arg1 in
'h')
	help
	;;
's')
	doSquash $2
	;;
'r')
	doResquash $2
	;;
'u')
	doUmount $2
	;;
*)
	die "Invalid command line parameter '$1', try ${SETBOLD}${0##*/} -h${CLRATTR}"
	;;
esac
